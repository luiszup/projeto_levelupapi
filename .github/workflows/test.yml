name: Tests and Coverage
on:
  push:
    branches: [ main, master, test ]
  pull_request:
    branches: [ main, master, test ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
        
    - name: Grant execute permission for mvnw
      run: chmod +x mvnw
        
    - name: Run tests and generate coverage report
      run: ./mvnw clean verify
      
    - name: Display coverage in logs
      run: |
        JACOCO_REPORT="target/site/jacoco/jacoco.xml"
        if [ -f "$JACOCO_REPORT" ]; then
            echo "üìä === RELAT√ìRIO DE COBERTURA ==="
            
            # Extrair cobertura usando grep mais robusto
            COVERED=$(grep '<counter type="INSTRUCTION"' "$JACOCO_REPORT" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*')
            MISSED=$(grep '<counter type="INSTRUCTION"' "$JACOCO_REPORT" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*')
            
            if [ ! -z "$COVERED" ] && [ ! -z "$MISSED" ]; then
                TOTAL=$((COVERED + MISSED))
                COVERAGE=$((COVERED * 100 / TOTAL))
                
                echo "‚úÖ Instru√ß√µes cobertas: $COVERED"
                echo "‚ùå Instru√ß√µes n√£o cobertas: $MISSED"
                echo "üìä Total de instru√ß√µes: $TOTAL"
                echo "üèÜ Cobertura total: $COVERAGE%"
                echo "üåø Branch atual: ${{ github.ref_name }}"
                echo "================================"
                
                # Define o m√≠nimo de cobertura
                MIN_COVERAGE=70
                
                if [ $COVERAGE -lt $MIN_COVERAGE ]; then
                    echo "‚ùå ERRO: Cobertura de testes ($COVERAGE%) abaixo do m√≠nimo ($MIN_COVERAGE%)"
                    echo "üí° Adicione mais testes para melhorar a cobertura"
                    echo "üìù Sugest√µes:"
                    echo "   - Teste os controllers com @WebMvcTest"
                    echo "   - Teste os services com @MockBean"
                    echo "   - Teste as valida√ß√µes e exce√ß√µes"
                    echo "   - Teste cen√°rios de sucesso e erro"
                    exit 1
                else
                    echo "‚úÖ Cobertura de testes adequada! üéâ"
                    echo "üöÄ Pronto para seguir com o desenvolvimento!"
                fi
            else
                echo "‚ö†Ô∏è N√£o foi poss√≠vel extrair dados de cobertura do XML"
                echo "üîç Conte√∫do do arquivo JaCoCo:"
                head -20 "$JACOCO_REPORT"
            fi
        else
            echo "‚ùå Relat√≥rio do JaCoCo n√£o encontrado em $JACOCO_REPORT"
            echo "üìÅ Verificando arquivos no diret√≥rio target:"
            find target/ -name "*.xml" -type f 2>/dev/null | head -10 || echo "Nenhum arquivo XML encontrado"
            echo ""
            echo "üí° Certifique-se de que o plugin JaCoCo est√° configurado no pom.xml"
            exit 1
        fi
      
    - name: Upload coverage reports to Codecov
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-levelup-api
        fail_ci_if_error: false
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'target/site/jacoco/jacoco.xml';
          
          if (fs.existsSync(path)) {
            const coverage = fs.readFileSync(path, 'utf8');
            const instructionMatch = coverage.match(/<counter type="INSTRUCTION"[^>]*covered="(\d+)"[^>]*missed="(\d+)"/);
            
            if (instructionMatch) {
              const covered = parseInt(instructionMatch[1]);
              const missed = parseInt(instructionMatch[2]);
              const total = covered + missed;
              const percentage = Math.round((covered * 100) / total);
              
              // Extrair tamb√©m cobertura de branches se dispon√≠vel
              const branchMatch = coverage.match(/<counter type="BRANCH"[^>]*covered="(\d+)"[^>]*missed="(\d+)"/);
              let branchCoverage = "N/A";
              if (branchMatch) {
                const branchCovered = parseInt(branchMatch[1]);
                const branchMissed = parseInt(branchMatch[2]);
                const branchTotal = branchCovered + branchMissed;
                branchCoverage = branchTotal > 0 ? Math.round((branchCovered * 100) / branchTotal) + "%" : "N/A";
              }
              
              const emoji = percentage >= 70 ? '‚úÖ' : '‚ö†Ô∏è';
              const status = percentage >= 70 ? 'Cobertura adequada!' : 'Cobertura abaixo do recomendado (70%)';
              
              const body = `## üìä Relat√≥rio de Cobertura de Testes ${emoji}
              
              | M√©trica | Valor |
              |---------|-------|
              | üéØ **Cobertura de Instru√ß√µes** | **${percentage}%** |
              | üåø **Cobertura de Branches** | **${branchCoverage}** |
              | ‚úÖ Instru√ß√µes cobertas | ${covered.toLocaleString()} |
              | ‚ùå Instru√ß√µes n√£o cobertas | ${missed.toLocaleString()} |
              | üìä Total de instru√ß√µes | ${total.toLocaleString()} |
              
              ### ${status}
              
              ${percentage < 70 ? `
              #### üí° Dicas para melhorar a cobertura:
              - Teste os endpoints da API com \`@WebMvcTest\`
              - Teste a l√≥gica de neg√≥cio nos services
              - Teste cen√°rios de erro e valida√ß√µes
              - Teste as entidades JPA e relacionamentos
              ` : 'üéâ Excelente trabalho! Continue assim!'}
              
              ---
              *Relat√≥rio gerado automaticamente pelo GitHub Actions* ü§ñ`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          } else {
            const body = `## ‚ùå Erro no Relat√≥rio de Cobertura
            
            N√£o foi poss√≠vel gerar o relat√≥rio de cobertura de testes.
            
            **Poss√≠veis causas:**
            - Plugin JaCoCo n√£o configurado no pom.xml
            - Falha na execu√ß√£o dos testes
            - Erro na gera√ß√£o do relat√≥rio
            
            Por favor, verifique os logs do workflow para mais detalhes.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }
          
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.ref_name }}
        path: |
          target/site/jacoco/
          target/surefire-reports/
        retention-days: 30