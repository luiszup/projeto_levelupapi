package com.projeto.levelupapi.projeto_levelupapi.controller;

import com.projeto.levelupapi.projeto_levelupapi.model.User;
import com.projeto.levelupapi.projeto_levelupapi.service.UserService;
import com.projeto.levelupapi.projeto_levelupapi.exception.ResourceNotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@RestController
@RequestMapping("/api/safezone")
@Tag(name = "üõ°Ô∏è Zona de Seguran√ßa", description = "Controle de entrada e sa√≠da da Zona de Seguran√ßa - necess√°ria para escolher itens de level up")
@SecurityRequirement(name = "bearerAuth")
public class SafeZoneController {
    private final UserService userService;

    public SafeZoneController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/{userId}/enter")
    @Operation(
        summary = "Entrar na Zona de Seguran√ßa",
        description = "Coloca o jogador na Zona de Seguran√ßa. IMPORTANTE: Apenas jogadores na Zona de Seguran√ßa podem escolher itens de recompensa ao subir de n√≠vel."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Jogador entrou na Zona de Seguran√ßa com sucesso"),
        @ApiResponse(responseCode = "404", description = "Jogador n√£o encontrado"),
        @ApiResponse(responseCode = "401", description = "Token de autentica√ß√£o inv√°lido ou ausente")
    })
    public ResponseEntity<String> enterSafeZone(
        @Parameter(description = "ID √∫nico do jogador", required = true)
        @PathVariable Long userId) {
        User user = userService.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
        user.setInSafeZone(true);
        userService.update(user.getId(), user);
        return ResponseEntity.ok("Voc√™ entrou na Zona de Seguran√ßa.");
    }

    @PostMapping("/{userId}/exit")
    @Operation(
        summary = "Sair da Zona de Seguran√ßa",
        description = "Remove o jogador da Zona de Seguran√ßa. ATEN√á√ÉO: Jogadores fora da Zona de Seguran√ßa n√£o podem escolher itens de recompensa."
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Jogador saiu da Zona de Seguran√ßa com sucesso"),
        @ApiResponse(responseCode = "404", description = "Jogador n√£o encontrado"),
        @ApiResponse(responseCode = "401", description = "Token de autentica√ß√£o inv√°lido ou ausente")
    })
    public ResponseEntity<String> exitSafeZone(
        @Parameter(description = "ID √∫nico do jogador", required = true)
        @PathVariable Long userId) {
        User user = userService.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
        user.setInSafeZone(false);
        userService.update(user.getId(), user);
        return ResponseEntity.ok("Voc√™ saiu da Zona de Seguran√ßa.");
    }

    @GetMapping("/{userId}/status")
    @Operation(
        summary = "Verificar status da Zona de Seguran√ßa",
        description = "Retorna true se o jogador est√° na Zona de Seguran√ßa, false caso contr√°rio"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Status retornado com sucesso"),
        @ApiResponse(responseCode = "404", description = "Jogador n√£o encontrado"),
        @ApiResponse(responseCode = "401", description = "Token de autentica√ß√£o inv√°lido ou ausente")
    })
    public ResponseEntity<Boolean> getSafeZoneStatus(
        @Parameter(description = "ID √∫nico do jogador", required = true)
        @PathVariable Long userId) {
        User user = userService.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
        return ResponseEntity.ok(user.isInSafeZone());
    }
}
